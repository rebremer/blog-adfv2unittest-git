variables:
  #
  # 1. Azure DevOps settings, change with your own
  AzureServiceConnectionId: '<<Your Azure DevOps Service Connection>>'
  SUBSCRIPTIONID: '<<Your Subscription ID>>'
  #
  # 2. Unique environment variables,change it with your own
  ADLSGEN2STOR: '<<Your ADLSgen2 storage account, globally unique>>'
  SQLSERVER: '<<Your SQL server name, globally unique>>'
  #
  # 3. Fixed Environment variables, no need for unique values
  RG: 'blog-adfv2unittest-rg'
  LOC: 'westeurope'
  ADFV2NAME: 'blog-adfv2unittest-deployadfv2'
  BACPACFILE: 'OrdersDatabase.bacpac'
  SQLDATABASE: 'blog-adfv2unittest-db'
  SQLSERVICEOBJECTIVE: 'S0'
  SQLLOGIN: 'blogadfv2sqluser'
  #
  # 4. Variables to speed up testing
  REDEPLOYSQLDB: 0   # In case REDEPLOYSQLDB = 0 AND $SQLDATABASE is already present in $RG, then it will not be restored again
  REDEPLOYADLS: 0    # In case REDEPLOYALDS = 0 AND $ADLSGEN2STOR is already present in $RG, then it will not be restored again
  TESTADFV2SQLDB: 1  # In case TESTSQLDBADFV2 = 1, then ADFV2 Pipeline "sqldb-dataflows-removenulls" using SQLDB will be tested in pytest 
  TESTADFV2ADLS: 1   # In case TESTALDSADFV2 = 1, then ADFV2 Pipeline "adlsgen2-dataflows-csvparquet" using ALDSGEN2 will be tested in pytest
  #
  # 5. Authentication settings
  AZUREDEVOPSSPNDBADMIN: 0
  # In case AZUREDEVOPSSPNDBADMIN = 1 (preferred option), then 
  # - Azure DevOps SPN will become SQLDB AAD admin. Authentication scheme to SQLDB is then as follows:
  #   1. Azure DevOps SPN adds ADFv2 MI as external user to SQLDB and is used by ADFv2 pipeline to read/write data to SQLDB. Notice:
  #     - !!! IMPORTANT!!! Azure DevOps SPN can only add ADFv2 MI to SQLDB as external user if it has directory reader rights, see https://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-service-principal
  #   2. Azure DevOps SPN will query results in pytest after ADFv2 pipeline has run to validate results
  # 
  # In case AZURE_DEVOPS_SPN_DB_ADMIN = 0, then 
  # - ADFv2 MI will become SQLDB AAD admin. Authentication scheme to SQLDB is then as follows:
  #   1. ADFv2 MI will be used by ADFv2 pipeline to read/write data to SQLDB. Notice:
  #     - ADFv2 MI is admin of the database which does not reflect a production situation where ADFv2 typically has read/write access to a limited set of tables
  #   2. SQL user/password authentication will query results in pytest after ADFv2 pipeline has run to validate results
  # AZURE_DEVOPS_SPN_DB_ADMIN = 1 is the prefered solution in production, but not always possible due to elevated rights. AZURE_DEVOPS_SPN_DB_ADMIN = 0 is fallback for testing
trigger:
- master

resources:
  repositories:
  - repository: blog-adfv2unittest-cicd # change with your own repo name when necessary
    type: git
    name: blog-adfv2unittest-devops
    ref: main
  - repository: blog-adfv2unittest-deployadfv2 # change with your own repo name when necessary
    type: git
    name: blog-adfv2unittest-devops
    ref: adf_publish

stages:
- stage: Build
  displayName: Build model and docker image
  jobs:
  - job: CreateBuildArtifactScriptsBacpac
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: blog-adfv2unittest-cicd
      path: blog-adfv2unittest-cicd
    - checkout: blog-adfv2unittest-deployadfv2
      path: blog-adfv2unittest-deployadfv2
    - task: CopyFiles@2
      displayName: 'Copy scripts to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '../blog-adfv2unittest-cicd'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/blog-adfv2unittest-cicd'
    - task: CopyFiles@2
      displayName: 'Copy ADFv2 ARM to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '../blog-adfv2unittest-deployadfv2'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/blog-adfv2unittest-deployadfv2'
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Upload package'
      artifact: drop
- stage: DeployTest
  displayName: 'Run unit tests ADFv2'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployTestADFv2
    pool:
      vmImage: 'ubuntu-latest'
    environment: DeployTestADFv2
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzurePowerShell@4
            displayName: 'Create ADFv2 instance with MI'
            inputs:
              azureSubscription: $(AzureServiceConnectionId)
              ScriptType: InlineScript
              Inline: "Set-AzDataFactoryV2 -ResourceGroupName $(RG) -Location $(LOC) -Name $(ADFV2NAME) -Force"
              azurePowerShellVersion: LatestVersion
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy ARM template ADFv2'
            inputs:
              azureResourceManagerConnection: $(AzureServiceConnectionId)
              subscriptionId: $(SUBSCRIPTIONID)
              resourceGroupName: $(RG)
              location: $(LOC)
              csmFile: '$(Pipeline.Workspace)/drop/blog-adfv2unittest-deployadfv2/blog-adfv2unittest3-adfv2/ARMTemplateForFactory.json'
              csmParametersFile: '$(Pipeline.Workspace)/drop/blog-adfv2unittest-deployadfv2/blog-adfv2unittest3-adfv2/ARMTemplateParametersForFactory.json'
              overrideParameters: "-factoryName $(ADFV2NAME) -AzureSqlDatabase2_connectionString \"Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().sqlserver};Initial Catalog=@{linkedService().database}\" -dataFactory_properties_globalParameters_sqlserver_value $(SQLSERVER).database.windows.net -dataFactory_properties_globalParameters_database_value $(SQLDATABASE) -dataFactory_properties_globalParameters_adlsgen2_value https://$(ADLSGEN2STOR).dfs.core.windows.net -dataFactory_location $(LOC)"
          - task: AzureCLI@2
            displayName: 'Create SQL database and restore BACPAC'
            inputs:
              azureSubscription: $(AzureServiceConnectionId)
              scriptType: bash
              scriptPath: '$(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd/deploymentscripts/1a_create_resources_sqldb.sh'
              workingDirectory: $(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd
          - task: AzureCLI@2
            displayName: 'Create ADLSgen2 account and upload csv data'
            inputs:
              azureSubscription: $(AzureServiceConnectionId)
              scriptType: bash
              scriptPath: '$(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd/deploymentscripts/1b_create_resources_adlsgen2.sh'
              workingDirectory: $(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd
          - task: AzureCLI@2
            displayName: 'Create tmp tokens and passwords'
            inputs:
              azureSubscription: $(AzureServiceConnectionId)
              scriptType: bash
              scriptPath: '$(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd/deploymentscripts/1c_create_tmp_tokens_passwords.sh'
          - script: |
              pip install -r pytestscripts/requirements.txt
              if [ $TESTADFV2SQLDB = 1 ]; then
                python -m pytest pytestscripts/2a_adfv2pipeline_sqldb.py --rg $(RG) --subscriptionid $(SUBSCRIPTIONID) --tokenadf $(tokenadf) --tokendb $(tokendb) --accesskeyadls $(accesskeyadls) --adfv2id $(adfv2id) --adfv2name $(ADFV2NAME) --sqlserver $(SQLSERVER) --sqldatabase $(SQLDATABASE) --sqllogin '$(SQLLOGIN)' --sqlpassword '$(sqlpassword)' --adlsgen2stor '$(ADLSGEN2STOR)' --azuredevopsspndbadmin $(AZUREDEVOPSSPNDBADMIN) --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
              fi
              if [ $TESTADFV2ADLS = 1 ]; then
                python -m pytest pytestscripts/2b_adfv2pipeline_adls.py --rg $(RG) --subscriptionid $(SUBSCRIPTIONID) --tokenadf $(tokenadf) --tokendb $(tokendb) --accesskeyadls $(accesskeyadls) --adfv2id $(adfv2id) --adfv2name $(ADFV2NAME) --sqlserver $(SQLSERVER) --sqldatabase $(SQLDATABASE) --sqllogin '$(SQLLOGIN)' --sqlpassword '$(sqlpassword)' --adlsgen2stor '$(ADLSGEN2STOR)' --azuredevopsspndbadmin $(AZUREDEVOPSSPNDBADMIN) --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
              fi
            displayName: 'Test ADFv2 pipelines with pytest'
            workingDirectory: $(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '$(Pipeline.Workspace)/drop/blog-adfv2unittest-cicd/**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'